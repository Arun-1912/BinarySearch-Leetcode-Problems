class Solution {
    public int singleNonDuplicate(int[] nums) {
        int low = 0;
        int high = nums.length-1;
        
        if (nums.length== 1) 
            return nums[0];
        
        if (nums[0] != nums[1]) 
            return nums[0];
        
        if (nums[nums.length - 1] != nums[nums.length - 2]) 
            return nums[nums.length - 1];
        
        
        while(low<=high){
            int mid = low + (high-low)/2;
            
            if(nums[mid]!=nums[mid+1] && nums[mid]!= nums[mid-1]){
                return nums[mid];
            }
            else if(nums[mid]==nums[mid-1]){
                int leftCount = (mid-low)+1;
                if(leftCount%2 != 0){
                    high = mid-2;
                }
                else{
                    low = mid+1;
                }
            }
            else if(nums[mid]==nums[mid+1]){
                int rightCount = (high-mid)+1;
                if(rightCount%2 != 0){
                    low = mid+2;
                }
                else{
                    high = mid-1;
                }
            }
        }
        return -1;
    }
}
